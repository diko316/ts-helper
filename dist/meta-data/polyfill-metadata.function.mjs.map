{"version":3,"file":"polyfill-metadata.function.mjs","sources":["../../lib/meta-data/polyfill-metadata.function.ts"],"sourcesContent":["import { TYPEOF_FUNCTION, TYPEOF_OBJECT } from '../validation';\nimport { AnyObject, getGlobal } from '../misc';\nimport { defineMetadata } from './define-metadata.function';\nimport { getMetadata } from './get-metadata.function';\nimport { metadata } from './metadata.decorator';\nimport { getOwnMetadata } from './get-own-metadata.function';\nimport { hasMetadata } from './has-metadata.function';\nimport { hasOwnMetadata } from './has-own-metadata.function';\n\ninterface PolyfilledMetadata {\n  metadata: typeof metadata;\n  defineMetadata: typeof defineMetadata;\n  getMetadata: typeof getMetadata;\n  hasMetadata: typeof hasMetadata;\n\n  getOwnMetadata: typeof getOwnMetadata;\n  hasOwnMetadata: typeof hasOwnMetadata;\n}\n\nlet APPLIED: PolyfilledMetadata | false = false;\n\nfunction getOrSetReflectObject(scope: AnyObject): PolyfilledMetadata {\n  if (typeof scope.Reflect === TYPEOF_OBJECT) {\n    return scope.Reflect;\n  }\n\n  const filler = {} as PolyfilledMetadata;\n  scope.Reflect = filler;\n\n  return filler;\n}\n\nfunction applyReflectMethodIf<Name extends keyof PolyfilledMetadata>(\n  methodName: Name,\n  polyfill: PolyfilledMetadata[Name],\n  reflect: PolyfilledMetadata,\n  target: PolyfilledMetadata\n): void {\n  if (typeof reflect[methodName] === TYPEOF_FUNCTION) {\n    target[methodName] = reflect[methodName];\n    return;\n  }\n\n  target[methodName] = reflect[methodName] = polyfill;\n}\n\nexport function polyfillMetadata(): PolyfilledMetadata {\n  if (APPLIED) {\n    return APPLIED;\n  }\n\n  const reflect = getOrSetReflectObject(getGlobal());\n\n  APPLIED = {} as PolyfilledMetadata;\n\n  applyReflectMethodIf('metadata', metadata, reflect, APPLIED);\n  applyReflectMethodIf('defineMetadata', defineMetadata, reflect, APPLIED);\n  applyReflectMethodIf('getMetadata', getMetadata, reflect, APPLIED);\n  applyReflectMethodIf('hasMetadata', hasMetadata, reflect, APPLIED);\n\n  applyReflectMethodIf('getOwnMetadata', getOwnMetadata, reflect, APPLIED);\n  applyReflectMethodIf('hasOwnMetadata', hasOwnMetadata, reflect, APPLIED);\n\n  return APPLIED;\n}\n"],"names":[],"mappings":";;;;;;;;;;AAmBA,IAAI,OAAO,GAA+B,KAAK,CAAC;AAEhD,SAAS,qBAAqB,CAAC,KAAgB,EAAA;AAC7C,IAAA,IAAI,OAAO,KAAK,CAAC,OAAO,KAAK,aAAa,EAAE;QAC1C,OAAO,KAAK,CAAC,OAAO,CAAC;AACtB,KAAA;IAED,MAAM,MAAM,GAAG,EAAwB,CAAC;AACxC,IAAA,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;AAEvB,IAAA,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,SAAS,oBAAoB,CAC3B,UAAgB,EAChB,QAAkC,EAClC,OAA2B,EAC3B,MAA0B,EAAA;AAE1B,IAAA,IAAI,OAAO,OAAO,CAAC,UAAU,CAAC,KAAK,eAAe,EAAE;QAClD,MAAM,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;QACzC,OAAO;AACR,KAAA;IAED,MAAM,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;AACtD,CAAC;SAEe,gBAAgB,GAAA;AAC9B,IAAA,IAAI,OAAO,EAAE;AACX,QAAA,OAAO,OAAO,CAAC;AAChB,KAAA;AAED,IAAA,MAAM,OAAO,GAAG,qBAAqB,CAAC,SAAS,EAAE,CAAC,CAAC;IAEnD,OAAO,GAAG,EAAwB,CAAC;IAEnC,oBAAoB,CAAC,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IAC7D,oBAAoB,CAAC,gBAAgB,EAAE,cAAc,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IACzE,oBAAoB,CAAC,aAAa,EAAE,WAAW,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IACnE,oBAAoB,CAAC,aAAa,EAAE,WAAW,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IAEnE,oBAAoB,CAAC,gBAAgB,EAAE,cAAc,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IACzE,oBAAoB,CAAC,gBAAgB,EAAE,cAAc,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AAEzE,IAAA,OAAO,OAAO,CAAC;AACjB;;;;"}